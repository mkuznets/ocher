// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OcherClient is the client API for Ocher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcherClient interface {
	TxTasks(ctx context.Context, opts ...grpc.CallOption) (Ocher_TxTasksClient, error)
}

type ocherClient struct {
	cc grpc.ClientConnInterface
}

func NewOcherClient(cc grpc.ClientConnInterface) OcherClient {
	return &ocherClient{cc}
}

func (c *ocherClient) TxTasks(ctx context.Context, opts ...grpc.CallOption) (Ocher_TxTasksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ocher_serviceDesc.Streams[0], "/ocher.Ocher/TxTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &ocherTxTasksClient{stream}
	return x, nil
}

type Ocher_TxTasksClient interface {
	Send(*Status) error
	Recv() (*Task, error)
	grpc.ClientStream
}

type ocherTxTasksClient struct {
	grpc.ClientStream
}

func (x *ocherTxTasksClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ocherTxTasksClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OcherServer is the server API for Ocher service.
// All implementations must embed UnimplementedOcherServer
// for forward compatibility
type OcherServer interface {
	TxTasks(Ocher_TxTasksServer) error
	mustEmbedUnimplementedOcherServer()
}

// UnimplementedOcherServer must be embedded to have forward compatible implementations.
type UnimplementedOcherServer struct {
}

func (UnimplementedOcherServer) TxTasks(Ocher_TxTasksServer) error {
	return status.Errorf(codes.Unimplemented, "method TxTasks not implemented")
}
func (UnimplementedOcherServer) mustEmbedUnimplementedOcherServer() {}

// UnsafeOcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcherServer will
// result in compilation errors.
type UnsafeOcherServer interface {
	mustEmbedUnimplementedOcherServer()
}

func RegisterOcherServer(s grpc.ServiceRegistrar, srv OcherServer) {
	s.RegisterService(&_Ocher_serviceDesc, srv)
}

func _Ocher_TxTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OcherServer).TxTasks(&ocherTxTasksServer{stream})
}

type Ocher_TxTasksServer interface {
	Send(*Task) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type ocherTxTasksServer struct {
	grpc.ServerStream
}

func (x *ocherTxTasksServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ocherTxTasksServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ocher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ocher.Ocher",
	HandlerType: (*OcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TxTasks",
			Handler:       _Ocher_TxTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ocher.proto",
}
